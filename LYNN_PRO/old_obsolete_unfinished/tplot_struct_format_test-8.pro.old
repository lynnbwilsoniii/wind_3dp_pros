;+
;*****************************************************************************************
;
;  FUNCTION :   tplot_struct_format_test.pro
;  PURPOSE  :   Tests an IDL structure to determine if it has the necessary structure 
;                 tags etc. to be compatible with TPLOT.
;
;  CALLED BY:   
;               NA
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               struct_value.pro
;               is_a_number.pro
;               is_a_3_vector.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               STRUCT          :  Scalar [structure] defining a valid TPLOT structure
;                                    the the user wishes to clip (in time) in order to
;                                    examine only data between the limits defined by the
;                                    TRANGE keyword.  The minimum required structure tags
;                                    for a TPLOT structure are as follows:
;                                      X   :  [N]-Element array of Unix times
;                                      Y   :  [N,?]-Element array of data, where ? can be
;                                               up to two additional dimensions
;                                               [e.g., pitch-angle and energy bins]
;                                    additional potential tags are:
;                                      V   :  [N,E]-Element array of Y-Axis values
;                                               [e.g., energy bin values]
;                                    or in the special case of particle data:
;                                      V1  :  [N,E]-Element array of energy bin values
;                                      V2  :  [N,A]-Element array of pitch-angle bins
;                                    occasionally one includes uncertainties as:
;                                      DY  :  [N,?]-Element array of uncertainties in Y
;                                    or in the special case of MMS particle data:
;                                      V1  :  [N,E]-Element array of azimuthal angles
;                                      V2  :  [L]-Element array of poloidal angles
;                                      V3  :  [N,E]-Element array of energy bin values
;
;                                    If V1 AND V2 are present, then Y must be an
;                                    [N,E,A]-element array.  If only V is present, then
;                                    Y must be an [N,E]-element array, where E is either
;                                    the 1st dimension of V [if 1D array] or the 2nd
;                                    dimension of V [if 2D array].
;
;                                    If DY is present, it must have the same dimensions
;                                    as Y for the TEST_DY to return a positive definite
;                                    result (e.g., see examples below).
;
;  EXAMPLES:    
;               [calling sequence]
;               test = tplot_struct_format_test(struct [,/YNDIM] [,/YVECT]           $
;                                                      [,TEST__V=test__v]            $
;                                                      [,TEST_V1_V2=test_v1_v2]      $
;                                                      [,TEST_V123=test_v123]        $
;                                                      [,TEST_DY=test_dy] [,/NOMSSG] )
;
;               ;;  Example of BAD structure
;               struct         = {A:LINDGEN(20),B:DINDGEN(10)}
;               test           = tplot_struct_format_test(struct,/NOMSSG)
;               PRINT, test[0]
;                  0
;
;               ;;  Example of a GOOD structure
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20)}
;               test           = tplot_struct_format_test(struct,/NOMSSG)
;               PRINT, test[0]
;                  1
;
;               ;;  Example [GOOD] of YVECT keyword usage
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20,3)}
;               test           = tplot_struct_format_test(struct,/YVECT,/NOMSSG)
;               PRINT, test[0]
;                  1
;
;               ;;  Example [BAD] of YVECT keyword usage
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20,5)}
;               test           = tplot_struct_format_test(struct,/YVECT,/NOMSSG)
;               PRINT, test[0]
;                  0
;
;               ;;  Example [BAD] of YVECT keyword usage
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20)}
;               test           = tplot_struct_format_test(struct,/YVECT,/NOMSSG)
;               PRINT, test[0]
;                  0
;
;               ;;  Example [GOOD] of TEST_DY keyword usage { TEST_DY = 2 --> 2D array }
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20,5),DY:FINDGEN(20,5)}
;               test           = tplot_struct_format_test(struct,TEST_DY=test_dy,/NOMSSG)
;               PRINT, test[0], test_dy[0]
;                  1   2
;
;               ;;  Example [GOOD] of TEST_DY keyword usage { TEST_DY = 3 --> 3D array }
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20,5,3),DY:FINDGEN(20,5,3)}
;               test           = tplot_struct_format_test(struct,TEST_DY=test_dy,/NOMSSG)
;               PRINT, test[0], test_dy[0]
;                  1   3
;
;               ;;  Example [BAD] of TEST_DY keyword usage { TEST_DY = 0 }
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20,5),DY:FINDGEN(20)}
;               test           = tplot_struct_format_test(struct,TEST_DY=test_dy,/NOMSSG)
;               PRINT, test[0], test_dy[0]
;                  1   0
;
;               ;;  Example [GOOD] of TEST__V keyword usage { TEST__V = 2 --> 2D array }
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20,5),V:FINDGEN(20,5)}
;               test           = tplot_struct_format_test(struct,TEST__V=test__v,/NOMSSG)
;               PRINT, test[0], test__v[0]
;                  1   2
;
;               ;;  Example [GOOD] of TEST__V keyword usage { TEST__V = 1 --> 1D array }
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20,5),V:FINDGEN(5)}
;               test           = tplot_struct_format_test(struct,TEST__V=test__v,/NOMSSG)
;               PRINT, test[0], test__v[0]
;                  1   1
;
;               ;;  Example [BAD] of TEST__V keyword usage
;               struct         = {X:DINDGEN(20),Y:FINDGEN(20,5),V:FINDGEN(15,25)}
;               test           = tplot_struct_format_test(struct,TEST__V=test__v,/NOMSSG)
;               PRINT, test[0], test__v[0]
;                  1   0
;
;               ;;  Example [GOOD] of TEST_V1_V2 keyword usage
;               struct         = {X:DINDGEN(50),Y:FINDGEN(50,10,5),V1:FINDGEN(50,10),V2:FINDGEN(50,5)}
;               test           = tplot_struct_format_test(struct,TEST_V1_V2=test_v1_v2,/NOMSSG)
;               PRINT, test[0], test_v1_v2[0]
;                  1   1
;
;               ;;  Example [BAD] of TEST_V1_V2 keyword usage
;               struct         = {X:DINDGEN(50),Y:FINDGEN(50,10,5),V1:FINDGEN(50,5),V2:FINDGEN(50,10)}
;               test           = tplot_struct_format_test(struct,TEST_V1_V2=test_v1_v2,/NOMSSG)
;               PRINT, test[0], test_v1_v2[0]
;                  1   0
;
;               ;;  Example [BAD] of TEST_V1_V2 keyword usage
;               struct         = {X:DINDGEN(50),Y:FINDGEN(50,10,5),V1:FINDGEN(5),V2:FINDGEN(10)}
;               test           = tplot_struct_format_test(struct,TEST_V1_V2=test_v1_v2,/NOMSSG)
;               PRINT, test[0], test_v1_v2[0]
;                  1   0
;
;               ;;  Example [BAD] of TEST_V1_V2 keyword usage
;               struct         = {X:DINDGEN(50),Y:FINDGEN(50,10,5),V:FINDGEN(5)}
;               test           = tplot_struct_format_test(struct,TEST_V1_V2=test_v1_v2,/NOMSSG)
;               PRINT, test[0], test_v1_v2[0]
;                  1   0
;
;               ;;  Example [BAD] of TEST_V1_V2 keyword usage
;               struct         = {X:DINDGEN(50),Y:FINDGEN(50,10,5)}
;               test           = tplot_struct_format_test(struct,TEST_V1_V2=test_v1_v2,/NOMSSG)
;               PRINT, test[0], test_v1_v2[0]
;                  1   0
;
;  KEYWORDS:    
;               YNDIM       :  Scalar [numeric] defining the number of dimensions desired
;                                in the STRUCT.Y array, if present
;                                [Default = FALSE]
;               YVECT       :  If set, program determines if STRUCT.Y is an 
;                                [N,3]-Element array of 3-vectors
;                                [Default = FALSE]
;               TEST__V     :  Set to a named varible to return logic tests that inform
;                                the user about the existence and format of the V
;                                structure tag.  The outputs are:
;                                  0  :  bad/incorrect format/non-existent
;                                  1  :  exists and is 1D
;                                  2  :  exists and is 2D (see notes above for STRUCT)
;               TEST_V1_V2  :  Set to a named varible to return logic tests that inform
;                                the user about the existence and format of the V1 and V2
;                                structure tags.  The outputs are:
;                                  0  :  bad/incorrect format/non-existent
;                                  1  :  both are set and correctly formatted
;               TEST_DY     :  Set to a named varible to return logic tests that inform
;                                the user about the existence and format of the DY
;                                structure tag.  The outputs are:
;                                  0  :  bad/incorrect format/non-existent
;                                  1  :  exists and is 1D
;                                  2  :  exists and is 2D (see notes above for STRUCT)
;                                  3  :  exists and is 3D (see notes above for STRUCT)
;               TEST_V123   :  Set to a named varible to return logic tests that inform
;                                the user about the existence and format of the V1, V2,
;                                and V3 structure tags.  The outputs are:
;                                  0  :  bad/incorrect format/non-existent
;                                  1  :  all are set and correctly formatted
;               NOMSSG      :  If set, routine will not print out warning/error message(s)
;                                [Default = FALSE]
;
;   CHANGED:  1)  Added error handling in case user entered a null variable
;                                                                   [10/19/2010   v1.1.0]
;             2)  Updated Man. page, cleaned up, and
;                   added keywords: TEST__V, TEST_V1_V2, NOMSSG
;                   and now calls is_a_3_vector.pro, is_a_number.pro
;                                                                   [11/28/2015   v1.2.0]
;             3)  Cleaned up, rewote, and now calls struct_value.pro and
;                   added keyword:  TEST_DY
;                                                                   [06/15/2016   v2.0.0]
;             4)  Optimize a little to reduce wasted computations and
;                   cleaned up a little
;                                                                   [12/01/2017   v2.0.1]
;             5)  Cleaned up and added keyword: TEST_V123
;                                                                   [07/05/2018   v2.0.2]
;             6)  Fixed a bug when the V tag is 1D
;                                                                   [05/03/2019   v2.0.3]
;             7)  Fixed another bug when the V tag is 1D
;                                                                   [04/09/2020   v2.0.4]
;             8)  Fixed original bug when the V tag is 1D
;                                                                   [06/12/2020   v2.0.5]
;             9)  Added a little error handling to prevent breaking when user enters
;                   an undefined variable that gets past N_PARAMS()
;                                                                   [05/10/2021   v2.0.6]
;
;   NOTES:      
;               1)  See also:  t_resample_tplot_struc.pro
;                              t_insert_nan_at_interval_se.pro
;
;  REFERENCES:  
;               NA
;
;   CREATED:  09/23/2010
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/10/2021   v2.0.6
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION tplot_struct_format_test,struct,YNDIM=yndim,YVECT=yvect,TEST__V=test__v,$
                                  TEST_V1_V2=test_v1_v2,TEST_DY=test_dy,         $
                                  TEST_V123=test_v123,NOMSSG=nomssg

;;  Let IDL know that the following are functions
FORWARD_FUNCTION is_a_number, is_a_3_vector
;;----------------------------------------------------------------------------------------
;;  Define dummy variables
;;----------------------------------------------------------------------------------------
;;  Constants
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;  logic outputs
good           = 0b           ;;  Main output
test_dy        = 0b           ;;  Test for DY structure tag
test__v        = 0b           ;;  Test for V structure tag
test_v1_v2     = 0b           ;;  Test for V1 and V2 structure tags
test_v123      = 0b           ;;  Test for V1 and V2 and V3 structure tags
;;  Dummy error messages
notstr_mssg    = 'Must be an IDL structure...'
badstr_mssg    = 'Not an appropriate TPLOT structure...'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() EQ 0) THEN RETURN,0b
IF (N_ELEMENTS(struct) LT 0) THEN RETURN,0b
str            = struct[0]   ;;  In case it is an array of structures of the same format
IF (SIZE(str[0],/TYPE) NE 8L) THEN BEGIN
  ;;  Not an IDL structure
  IF ~KEYWORD_SET(nomssg) THEN MESSAGE,notstr_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;----------------------------------------------------------------------------------------
;;  Examine input
;;----------------------------------------------------------------------------------------
x              = struct_value(str,       'X',DEFAULT=0d0,  INDEX=ind__x)
y              = struct_value(str,       'Y',DEFAULT=f  ,  INDEX=ind__y)
;;  Test tag outputs
test__x        = (ind__x[0] GE 0)
test__y        = (ind__y[0] GE 0)
good           = (test__x[0] AND test__y[0])
IF (good[0] EQ 0) THEN BEGIN
  ;;  Not a TPLOT structure
  IF ~KEYWORD_SET(nomssg) THEN MESSAGE,badstr_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;  Check YNDIM
x_ddim         = SIZE(x,/DIMENSIONS)
y_ndim         = SIZE(y,/N_DIMENSIONS)
y_ddim         = SIZE(y,/DIMENSIONS)
test           = (N_ELEMENTS(yndim) GT 0) AND is_a_number(yndim,/NOMSSG)
IF (test[0]) THEN BEGIN
  good = (y_ndim[0] EQ LONG(yndim[0]))
ENDIF
;;  Check YVECT
IF KEYWORD_SET(yvect) THEN good = is_a_3_vector(y,NOMSSG=nomssg)
;;  Define and check for V, or V1 and V2, or DY
v              = struct_value(str,       'V',DEFAULT=f  ,  INDEX=ind__v)
v1             = struct_value(str,      'V1',DEFAULT=f  ,  INDEX=ind_v1)
v2             = struct_value(str,      'V2',DEFAULT=f  ,  INDEX=ind_v2)
v3             = struct_value(str,      'V3',DEFAULT=f  ,  INDEX=ind_v3)
dy             = struct_value(str,      'DY',DEFAULT=f  ,  INDEX=ind_dy)
test__v        = (ind__v[0] GE 0)
test_v1        = (ind_v1[0] GE 0)
test_v2        = (ind_v2[0] GE 0)
test_v3        = (ind_v3[0] GE 0)
test_dy        = (ind_dy[0] GE 0)
;;  Check if V, or V1 and V2, or DY even exist
check_vs       = ~test__v[0] AND (~test_v1[0] OR ~test_v2[0]) AND ~test_dy[0] AND ~test_v3[0]
IF (check_vs[0]) THEN RETURN,good[0]         ;;  check_vs = FALSE --> stop here and return to user
;;----------------------------------------------------------------------------------------
;;  Determine TEST_DY output
;;----------------------------------------------------------------------------------------
IF (~test_dy[0]) THEN dy = ''
szddy          = SIZE(dy,/DIMENSIONS)
;test           =  (szddy[0] NE 0) AND is_a_number(dy,NOMSSG=nomssg)
test           =  (szddy[0] NE 0)
IF (test[0]) THEN test = is_a_number(dy[0],NOMSSG=nomssg)
IF (test[0]) THEN BEGIN
  ;;  Check dimensions
  test_dy_nd = (N_ELEMENTS(szddy) EQ [1,2,3])
  good_dy_nd = WHERE(test_dy_nd,gd_dy_nd)
  CASE good_dy_nd[0] OF
    0L    :  BEGIN
      IF (y_ndim[0] NE 1L) THEN test_dy = 0b ELSE test_dy = (x_ddim[0] EQ szddy[0])
    END
    1L    :  BEGIN
      IF (y_ndim[0] NE 2L) THEN test_ddy = 0b ELSE $
        test_ddy = (x_ddim[0] EQ szddy[0]) AND (y_ddim[1] EQ szddy[1])
      IF (test_ddy[0]) THEN test_dy = 2b ELSE test_dy = 0b
    END
    2L    :  BEGIN
      IF (y_ndim[0] NE 3L) THEN test_ddy = 0b ELSE $
        test_ddy = (x_ddim[0] EQ szddy[0]) AND (y_ddim[1] EQ szddy[1]) AND (y_ddim[2] EQ szddy[2])
      IF (test_ddy[0]) THEN test_dy = 3b ELSE test_dy = 0b
    END
    ELSE  :  test_dy = 0b    ;;  Not dealing with 4D input!
  ENDCASE
ENDIF ELSE test_dy = 0b
;;  Check if V, or V1 and V2 even exist
check_vs       = ~test__v[0] AND (~test_v1[0] OR ~test_v2[0]) AND ~test_v3[0]
IF (check_vs[0]) THEN RETURN,good[0]         ;;  check_vs = FALSE --> stop here and return to user
;;----------------------------------------------------------------------------------------
;;  Determine TEST__V output
;;----------------------------------------------------------------------------------------
;;  Define TEST__V for output
IF (test__v[0]) THEN vv = v  ELSE vv = ''
szdvv          = SIZE(vv,/DIMENSIONS)
;test           =  (szdvv[0] NE 0) AND is_a_number(vv,NOMSSG=nomssg)
test           =  (szdvv[0] NE 0)
IF (test[0]) THEN test = is_a_number(vv[0],NOMSSG=nomssg)
IF (test[0]) THEN BEGIN
  test_vv_2d = (N_ELEMENTS(szdvv) EQ 2) AND (TOTAL(szdvv EQ 1) EQ 0);; ELSE test_vv_2d = 0b
  IF (test_vv_2d[0]) THEN BEGIN
    ;;  V is 2D
    test_vv = (x_ddim[0] EQ szdvv[0]) AND (y_ddim[1] EQ szdvv[1])   ;;  Make sure dimensions match if 2D
    IF (test_vv[0]) THEN test__v = 2b ELSE test__v = 0b
  ENDIF ELSE BEGIN
    ;;  V is 1D
    y_ddim0 = REFORM(y_ddim)
    szdvv0  = REFORM(szdvv)
    test_vv = (y_ddim0[0] EQ szdvv0[0])
;    test_vv = (y_ddim[1] EQ szdvv[0])
;    test_vv = (y_ddim[0] EQ szdvv[0]) OR (y_ddim[1] EQ szdvv[0])
    IF (test_vv[0]) THEN test__v = 1b ELSE test__v = 0b
  ENDELSE
ENDIF ELSE test__v = 0b
;;  Check if V1 and V2 even exist
check_vs       = (~test_v1[0] OR ~test_v2[0]) AND ~test_v3[0]
IF (check_vs[0]) THEN RETURN,good[0]         ;;  check_vs = FALSE --> stop here and return to user
;;----------------------------------------------------------------------------------------
;;  Determine TEST_V1_V2 output
;;----------------------------------------------------------------------------------------
;;  Define V1 and V2, if exist
IF (~test_v1[0]) THEN v1 = ''
IF (~test_v2[0]) THEN v2 = ''
szdv1          = SIZE(v1,/DIMENSIONS)
szdv2          = SIZE(v2,/DIMENSIONS)
test           = (N_ELEMENTS(szdv1) EQ 2) AND (N_ELEMENTS(szdv2) EQ 2) AND $
                 (y_ndim[0] EQ 3)
IF (test[0]) THEN BEGIN
  ;;  Check V1 format
  test_v1        = (szdv1[0] NE 0) AND (x_ddim[0] EQ szdv1[0]) AND $
                   (y_ddim[1] EQ szdv1[1])
  IF (test_v1[0]) THEN test_v1 = is_a_number(v1[0],NOMSSG=nomssg)
  ;;  Check V2 format
  test_v2        = (szdv2[0] NE 0) AND (x_ddim[0] EQ szdv2[0]) AND $
                   (y_ddim[2] EQ szdv2[1])
  IF (test_v2[0]) THEN test_v2 = is_a_number(v2[0],NOMSSG=nomssg)
  ;;  Define TEST_V1_V2
  test_v1_v2     = (test_v1[0] AND test_v2[0])
ENDIF ELSE test_v1_v2 = 0b
;;  Check if V1 and V2 and V3 even exist
check_vs       = ~test_v3[0]
IF (check_vs[0]) THEN RETURN,good[0]         ;;  check_vs = FALSE --> stop here and return to user
;;----------------------------------------------------------------------------------------
;;  Determine TEST_V123 output
;;----------------------------------------------------------------------------------------
;;  Define V3, if exists
IF (~test_v3[0]) THEN v3 = ''
szdv3          = SIZE(v3,/DIMENSIONS)
test           = (N_ELEMENTS(szdv1) EQ 2) AND (N_ELEMENTS(szdv2) EQ 1) AND $
                 (N_ELEMENTS(szdv3) EQ 2) AND (y_ndim[0] EQ 4)
IF (test[0]) THEN BEGIN
  ;;  Check V1 format
  test_v1        = (szdv1[0] NE 0) AND (x_ddim[0] EQ szdv1[0]) AND $
                   (y_ddim[1] EQ szdv1[1])
  IF (test_v1[0]) THEN test_v1 = is_a_number(v1[0],NOMSSG=nomssg)
  ;;  Check V2 format
  test_v2        = (szdv2[0] NE 0) AND (y_ddim[2] EQ szdv2[0])
  IF (test_v2[0]) THEN test_v2 = is_a_number(v2[0],NOMSSG=nomssg)
  ;;  Check V3 format
  test_v3        = (szdv3[0] NE 0) AND (x_ddim[0] EQ szdv3[0]) AND $
                   (y_ddim[3] EQ szdv3[1])
  IF (test_v3[0]) THEN test_v3 = is_a_number(v3[0],NOMSSG=nomssg)
  ;;  Define TEST_V123
  test_v123      = (test_v1[0] AND test_v2[0] AND test_v3[0])
ENDIF ELSE test_v123 = 0b
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,good[0]
END



